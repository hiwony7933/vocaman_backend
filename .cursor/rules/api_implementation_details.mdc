---
description: 
globs: 
alwaysApply: false
---
# API 구현 상세 가이드라인

이 문서는 Vocaman v2.0 백엔드 프로젝트의 API 구현에 대한 상세 지침을 제공합니다. 일관성 있고 유지보수 가능한 API를 구축하기 위해 다음 규칙을 따릅니다.

## 1. 프로젝트 구조 및 파일 명명 규칙

*   **라우트 (Routes):**
    *   API 엔드포인트 정의는 `routes` 디렉토리 내에 기능별로 파일을 분리하여 관리합니다. (예: `[routes/authRoutes.js](mdc:routes/authRoutes.js)`, `[routes/userRoutes.js](mdc:routes/userRoutes.js)`, `[routes/datasetRoutes.js](mdc:routes/datasetRoutes.js)` 등)
    *   파일 이름은 `featureRoutes.js` 형식을 따릅니다. (예: `authRoutes.js`, `userRoutes.js`)
    *   Express Router (`express.Router()`)를 사용하여 라우트를 구성합니다.
*   **컨트롤러 (Controllers):**
    *   각 라우트 파일에 매핑되는 비즈니스 로직은 `controllers` 디렉토리 내에 기능별 파일을 분리하여 관리합니다. (예: `[controllers/authController.js](mdc:controllers/authController.js)`, `[controllers/userController.js](mdc:controllers/userController.js)`, `[controllers/datasetController.js](mdc:controllers/datasetController.js)` 등)
    *   파일 이름은 `featureController.js` 형식을 따릅니다. (예: `authController.js`, `userController.js`)
    *   컨트롤러 함수는 `async/await`를 사용하여 비동기 로직을 처리하고, `try...catch` 블록으로 에러를 핸들링하여 적절한 HTTP 상태 코드와 함께 JSON 응답을 반환합니다.

## 2. 라우트 및 컨트롤러 작성 패턴

*   **라우트 정의:**
    *   라우트 파일에서는 HTTP 메소드 (GET, POST, PUT, DELETE 등)와 경로를 명시적으로 정의합니다.
    *   각 라우트는 해당 기능을 처리하는 컨트롤러 함수와 연결됩니다.
    *   인증이 필요한 라우트에는 `[middlewares/authMiddleware.js](mdc:middlewares/authMiddleware.js)` 미들웨어를 적용합니다.
    ```javascript
    // 예시: routes/userRoutes.js
    const express = require('express');
    const router = express.Router();
    const userController = require('../controllers/userController');
    const authMiddleware = require('../middlewares/authMiddleware');

    // 공개 라우트
    router.get('/:userId/stats', userController.getUserStats);

    // 인증 필요한 라우트
    router.get('/me', authMiddleware, userController.getMyProfile);
    router.put('/me', authMiddleware, userController.updateMyProfile);
    router.get('/me/settings', authMiddleware, userController.getMySettings);
    // ... 기타 라우트
    ```

*   **컨트롤러 함수:**
    *   컨트롤러 함수는 `(req, res)` 객체를 인자로 받습니다.
    *   요청 처리 성공 시 `res.status(200).json(...)` 또는 적절한 상태 코드와 함께 JSON 응답을 반환합니다.
    *   오류 발생 시 일반적으로 `res.status(statusCode).json({ message: "오류 메시지", error: error.message })`과 같이 일관된 오류 응답 형식을 사용합니다. (구체적인 에러 코드 및 메시지는 상황에 맞게 조정)
    *   데이터베이스에서 반환된 `BigInt` 타입의 ID 값(예: `insertId`, `userId`)은 클라이언트로 응답하기 전에 반드시 `toString()` 메소드를 사용하여 문자열로 변환합니다.
    ```javascript
    // 예시: controllers/authController.js
    // ...
    const newUser = { email, password: hashedPassword, username };
    const [result] = await pool.query('INSERT INTO Users SET ?', newUser);
    const userId = result.insertId; // BigInt

    res.status(201).json({ message: '회원가입 성공', userId: userId.toString() });
    // ...
    ```

## 3. 데이터베이스 연동

*   데이터베이스 연결은 `[config/db.js](mdc:config/db.js)` 파일에 정의된 MariaDB 커넥션 풀(`pool`)을 사용합니다. (실제 `db.js` 파일 경로를 확인하여 정확히 명시해야 합니다. 현재는 `server.js`에서 `pool`을 직접 사용하거나 `require('./config/db')` 형태로 가져오는 것으로 보입니다.)
*   컨트롤러 함수 내에서 `pool.query()`를 사용하여 SQL 쿼리를 실행합니다. SQL 인젝션 방지를 위해 항상 플레이스홀더(`?`)를 사용합니다.

## 4. Swagger API 문서화

*   모든 API 엔드포인트는 JSDoc 주석을 사용하여 Swagger 문서를 생성합니다. 이는 `[server.js](mdc:server.js)`에 설정된 `swagger-ui-express`를 통해 `/api-docs` 경로에서 확인할 수 있습니다.
*   JSDoc 주석은 `routes` 디렉토리 내의 각 라우트 정의 위에 작성하며, API 요청/응답 스키마, 파라미터, 설명 등을 상세히 기술합니다.
*   YAML 형식의 주석 작성 시 들여쓰기와 콜론 사용에 주의하여 오류가 발생하지 않도록 합니다. (예: `description: '설명 내용'` 과 같이 콜론 뒤 문자열은 따옴표로 감싸는 것을 권장)

## 5. 주요 라이브러리 및 역할

*   **`express`**: Node.js 웹 프레임워크. API 서버의 기반.
*   **`mysql2` (또는 `mariadb`)**: MariaDB 데이터베이스 드라이버. `[config/db.js](mdc:config/db.js)`에서 커넥션 풀 생성에 사용.
*   **`bcrypt`**: 사용자 비밀번호 해싱 및 검증. (솔트 라운드 수 확인 필요)
*   **`jsonwebtoken`**: JWT (JSON Web Token) 생성, 서명, 검증을 통한 사용자 인증 및 인가.
*   **`google-auth-library`**: Google OAuth 2.0을 사용한 소셜 로그인 기능 구현.
*   **`swagger-jsdoc` & `swagger-ui-express`**: JSDoc 주석을 기반으로 API 문서를 자동 생성하고, 웹 UI로 제공.
*   **`dotenv`**: `.env` 파일을 통해 환경 변수 관리.

## 6. 환경 설정

*   데이터베이스 접속 정보 등 민감한 정보는 `.env` 파일에 정의하고, `.gitignore`에 추가하여 저장소에 직접 노출되지 않도록 합니다.
*   `.env` 파일 내 문자열 값은 특수 문자 파싱 오류를 방지하기 위해 큰따옴표(`"`)로 감싸는 것을 권장합니다.

---
