---
description:
globs:
alwaysApply: false
---
# Vocaman Backend 프로젝트 상세 개요

이 문서는 Vocaman Node.js/Express/MariaDB 백엔드 프로젝트의 아키텍처, 핵심 로직, 주요 파일 및 개발 가이드라인에 대한 상세 정보를 제공합니다.

## 1. 기술 스택 및 라이브러리

*   **런타임 환경:** Node.js
*   **웹 프레임워크:** Express.js - 라우팅, 미들웨어 처리, 요청/응답 관리를 담당합니다.
*   **데이터베이스:** MariaDB - 관계형 데이터 저장소.
*   **DB 드라이버:** `mysql2/promise` - Promise 기반의 MariaDB 클라이언트 라이브러리. 연결 풀링을 사용합니다.
*   **인증:**
    *   `jsonwebtoken (JWT)`: 사용자 인증 및 세션 관리를 위한 Access Token 및 Refresh Token 생성/검증.
    *   `bcrypt`: 사용자 비밀번호를 안전하게 해싱하여 저장 및 비교.
    *   `google-auth-library`: Google OAuth 2.0을 이용한 소셜 로그인 구현 및 ID 토큰 검증.
*   **API 문서화:**
    *   `swagger-jsdoc`: JSDoc 주석을 파싱하여 OpenAPI 사양(JSON/YAML) 생성.
    *   `swagger-ui-express`: 생성된 OpenAPI 사양을 기반으로 인터랙티브한 API 문서를 웹 UI로 제공.
*   **환경변수 관리:** `dotenv` - `.env` 파일에 정의된 환경 변수를 `process.env`로 로드. DB 접속 정보, 시크릿 키 등 민감 정보를 관리합니다.

## 2. 프로젝트 구조 및 주요 파일

*   **`/` (루트 디렉토리)**
    *   `server.js`: [server.js](mdc:server.js)
        *   **역할**: 애플리케이션의 메인 진입점 및 서버 설정 파일.
        *   **주요 기능**:
            *   Express 앱 인스턴스 생성 및 기본 설정 (포트 리스닝).
            *   필수 미들웨어 로드 (JSON 파싱, CORS 설정, 로깅 등).
            *   `dotenv`를 이용한 환경 변수 로드.
            *   MariaDB 연결 풀 (`pool`) 초기화 및 export.
            *   API 라우터 마운트 (`routes/` 디렉토리의 라우터 사용).
            *   Swagger 설정 (`swaggerDefinition`, `options`) 및 `/api-docs` 경로에 Swagger UI 연동.
            *   정적 파일 서빙 설정 (예: `/public/audio` 경로의 오디오 파일).
            *   기본 오류 처리 미들웨어 설정.
    *   `.env`: 환경 변수 정의 파일 (DB 정보, JWT 시크릿, Google Client ID 등). Git에 포함되지 않아야 합니다.
    *   `.env.example`: [`.env.example`](mdc:.env.example) - `.env` 파일의 구조 예시 및 필요한 환경 변수 목록 제공.
    *   `package.json`, `package-lock.json`: 프로젝트 의존성 관리.

*   **`routes/`**: API 엔드포인트 정의 및 해당 요청을 처리할 컨트롤러 함수 연결.
    *   `express.Router`를 사용하여 모듈화.
    *   각 엔드포인트에 대한 JSDoc (`@swagger`) 주석을 포함하여 API 문서를 상세화합니다.
    *   필요한 경우, 특정 라우트 또는 전체 라우터에 인증 미들웨어 (`verifyToken`) 적용.
    *   주요 라우트 파일:
        *   [authRoutes.js](mdc:routes/authRoutes.js): `/api/v2/auth/*` (회원가입, 로그인, 로그아웃, 토큰 갱신, Google 로그인).
        *   [userRoutes.js](mdc:routes/userRoutes.js): `/api/v2/users/*` (내 정보, 설정, 관계 요청/관리, 통계). 인증 필요.
        *   [datasetRoutes.js](mdc:routes/datasetRoutes.js): `/api/v2/datasets/*` (데이터셋 CRUD, 단어(Concept) 추가/제거, 커스텀 단어(Term/Hint) 추가). 생성/수정/삭제는 인증 및 권한 확인 필요.
        *   [gameRoutes.js](mdc:routes/gameRoutes.js): `/api/v2/game/*` (특정/기본 데이터셋 기반 게임 세션 시작, 게임 결과 기록). 인증 필요.
        *   [homeworkRoutes.js](mdc:routes/homeworkRoutes.js): `/api/v2/homework/*` (숙제 할당/조회/수정/삭제, 진행 상황 제출/조회). 인증 및 역할/관계 확인 필요.
        *   [notificationRoutes.js](mdc:routes/notificationRoutes.js): `/api/v2/notifications/*` (알림 목록 조회, 읽음 처리). 인증 필요.
        *   [contentRoutes.js](mdc:routes/contentRoutes.js): `/api/v2/concepts/*`, `/api/v2/terms/*`, `/api/v2/audio/*` (Concept/Term 상세 정보 조회, 오디오 파일 접근). 오디오 외에는 인증 필요할 수 있음.

*   **`controllers/`**: 실제 비즈니스 로직 구현. 데이터베이스 작업 수행.
    *   `server.js`에서 export된 `pool` 객체를 사용하여 DB 쿼리 실행.
    *   라우트 핸들러 함수 형태 (`async (req, res) => { ... }`).
    *   입력값 유효성 검사, 데이터 처리, DB 상호작용, 결과 포맷팅 및 응답 전송 담당.
    *   `try...catch` 블록 및 `finally` (DB 연결 반환) 사용 권장.
    *   **트랜잭션 사용**: 데이터 일관성이 중요한 작업 (예: 게임 결과 기록 및 통계 업데이트 동시 처리, 숙제 진행 상황 제출 및 완료 처리/보상 지급, 커스텀 단어 추가 시 Concept/Term/Hint 동시 생성)에서 `conn.beginTransaction()`, `conn.commit()`, `conn.rollback()` 사용.
    *   **BigInt 처리**: DB에서 반환되는 ID 값 (`insertId`, `user_id` 등)이 `BigInt` 타입일 수 있으므로, `res.json()`으로 응답하기 전에 `.toString()`을 호출하여 문자열로 변환해야 함. ([authController.js](mdc:controllers/authController.js), [homeworkController.js](mdc:controllers/homeworkController.js) 등 참고).
    *   주요 컨트롤러 파일:
        *   [authController.js](mdc:controllers/authController.js): 회원가입 (bcrypt 해싱), 로그인 (bcrypt 비교, JWT 생성), Google 로그인 (토큰 검증, 사용자 조회/생성), 토큰 갱신 (JWT 검증).
        *   [userController.js](mdc:controllers/userController.js): 사용자 프로필/설정 CRUD, 부모-자녀 관계(UserRelations) 요청/승인/조회, 통계(UserStats) 조회.
        *   [datasetController.js](mdc:controllers/datasetController.js): 데이터셋(Datasets) CRUD (소유권 확인), Dataset-Concept 연결(DatasetConcepts) 관리, 커스텀 단어 추가 (Concepts, Terms, Hints 동시 생성/수정 - 트랜잭션).
        *   [gameController.js](mdc:controllers/gameController.js): 데이터셋 기반 게임 단어 목록 조회 (JOIN 활용), 게임 로그(GameLogs) 기록 및 사용자 통계(UserStats) 업데이트 (트랜잭션).
        *   [homeworkController.js](mdc:controllers/homeworkController.js): 숙제(HomeworkAssignments) 할당 (관계 확인)/조회/수정/삭제 (소유권 확인), 숙제 진행(HomeworkProgress) 기록 (UPSERT), 숙제 완료 처리 및 보상 지급 (트랜잭션).
        *   [notificationController.js](mdc:controllers/notificationController.js): 알림(Notifications) 목록 조회 및 읽음 처리.
        *   [contentController.js](mdc:controllers/contentController.js): Concept/Term/Hint 정보 조회, 오디오 파일 경로 제공 로직 (실제 서빙은 `server.js`).

*   **`middleware/`**: 요청 처리 파이프라인 중간에 위치하는 함수.
    *   [authMiddleware.js](mdc:middleware/authMiddleware.js): (`verifyToken`)
        *   **역할**: 요청 헤더의 `Authorization` Bearer 토큰을 검증.
        *   **기능**: `jsonwebtoken.verify()`를 사용하여 토큰의 유효성(시크릿 키, 만료 시간) 확인. 유효하면 토큰 페이로드(사용자 정보)를 `req.user` 객체에 추가하여 다음 핸들러로 전달. 유효하지 않으면 401 또는 403 에러 응답.

*   **`public/`**: 정적 파일 저장 디렉토리.
    *   `audio/`: 오디오 파일 (.mp3 등) 저장 위치 (예시). `server.js`의 `express.static` 미들웨어를 통해 서빙될 수 있음.

## 3. 데이터베이스 상호작용

*   **연결 풀링**: `server.js`에서 `mysql2/promise.createPool()`을 사용하여 DB 연결 풀 생성. 각 요청 처리 시 `pool.getConnection()`으로 연결을 얻고, 작업 완료 후 `conn.release()`로 반환하여 효율적인 DB 연결 관리.
*   **Promise 기반**: `async/await` 구문을 사용하여 비동기 DB 쿼리 처리.
*   **쿼리 실행**: `conn.query()` 또는 `conn.execute()` (Prepared Statement 사용 시) 메서드 사용. SQL Injection 방지를 위해 플레이스홀더(`?`) 사용 필수.
*   **트랜잭션**: 여러 쿼리가 원자적으로 실행되어야 하는 경우 (All or Nothing) 반드시 트랜잭션을 사용 (위 컨트롤러 설명 참고).
*   **BigInt 주의**: ID 컬럼 등에서 `BigInt` 타입이 반환될 수 있으므로, 클라이언트 응답 시 `.toString()`으로 변환.

## 4. API 문서화 (Swagger)

*   **자동 생성**: `swagger-jsdoc`이 `routes/*.js` 파일 내의 JSDoc 주석 (`/** ... */`)을 분석하여 OpenAPI 3.0 명세 생성.
*   **JSDoc 구조**: `@swagger` 태그를 사용하여 각 API의 경로, 메서드, 요약, 설명, 파라미터, 요청 본문 스키마, 응답 스키마 등을 정의. YAML 형식 사용. ([authRoutes.js](mdc:routes/authRoutes.js) 등 참고)
*   **스키마 정의**: 요청/응답 데이터 구조는 `@swagger` 주석 내 `components/schemas`에 정의하고, 각 API에서 `$ref`로 참조하여 재사용성 높임.
*   **UI 제공**: `swagger-ui-express`가 생성된 명세를 기반으로 `/api-docs` 경로에 인터랙티브 UI를 제공하여 API 테스트 및 확인 용이.
*   **인증 설정**: Swagger UI에서 JWT Bearer 토큰 인증을 테스트할 수 있도록 `securitySchemes` 및 `security` 설정 추가 ([server.js](mdc:server.js) 참고).

## 5. 개발 환경 설정 및 실행

1.  **의존성 설치**: `npm install`
2.  **환경 변수 설정**: `.env.example` 파일을 복사하여 `.env` 파일 생성 후, 실제 환경에 맞는 값 (DB 접속 정보, JWT 시크릿, Google Client ID 등) 입력. **주의**: `.env` 파일 내 값에 특수문자가 포함된 경우, 큰따옴표(`"`)로 감싸야 `dotenv`가 제대로 파싱할 수 있음.
3.  **데이터베이스 준비**: MariaDB 서버 실행 및 스키마 생성/마이그레이션 (필요시). DB 사용자 계정 및 권한 확인.
4.  **서버 실행**: `npm start` 또는 `node server.js` (nodemon 사용 권장: `npm run dev` 등).
5.  **API 테스트**: Postman, Insomnia 또는 웹 브라우저에서 `/api-docs` 경로를 통해 Swagger UI 사용.

